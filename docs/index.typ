#import "lib/gost.typ": init

#show: init

= Цель работы

Изучение структур данных «стек» и «очередь»,
а также получение практических навыков их реализации.

= Выполнение индивидуального задания

Реализовать структуры данных «стек» и «очередь» в соответствии с
заданным вариантом. Дополнительно программа должна удовлетворять
следующим требованиям:
+ Вывод на экран состояния моделируемой системы на каждой
  итерации работы (содержимое стека(ов), очереди(ей),
  процессора(ов));
+ Для каждой задачи из списка входных задач должно быть
  определено время поступления;
+ Необходимо наличие, как автоматического генератора задач, так и
  возможность ручного добавления задач, с указанием их параметров
  (в зависимости от задания);
+ Необходимо обработать ситуации, при которых какая-либо
  структура данных может быть переполнена.

Вариант 25


Задача 7.
Система состоит из двух процессоров P0 и P1, стека S и очереди F. В
систему могут поступать запросы на выполнение задач, причем время
выполнения задачи каждым из процессоров, может отличаться.
Поступающие запросы попадают в стек.

#figure(image("images/000_task.png"))

Если процессор P0 свободен, то в него поступает на обработку задача
из стека. После обработки задачи процессором P0, задача помещается в
очередь. Если очередь не пуста и процессор P1 свободен, то задача
извлекается из очереди, и обрабатывается процессором.

Задачу необходимо выполнить с использованием статического стека и статической очереди.

= Код программы

#raw(read("../src/main.kt"), lang: "kt", block: true)

= Контрольные примеры

В таблице представлено расписание поступления записей для контрольного примера

#figure(table(
  columns: (auto, auto, auto),
  table.header([Момент поступления], [Название], [Длительность выполнения (в тактах)]),
  [1], [Инициализация процесса], [3],
  [2], [Запрос к базе данных], [5],
  [3], [Обработка ввода], [2],
  [4], [Рендеринг кадра], [4],
  [5], [Запись в лог-файл], [1],
  [6], [Архивация отчета], [6],
)
, caption: "Расписание поступления записей")

При выполнении контрольного примера ограничения размер стека и очереди равен 3. Результат работы программы:

```text
Такт 0
Задачи: Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Рендеринг кадра, tacts=4, addedIndex=4)
Task(id=Запись в лог-файл, tacts=1, addedIndex=5)
Task(id=Архивация отчета, tacts=6, addedIndex=6)
Стек[Task(id=Инициализация процесса, tacts=3, addedIndex=1)
]
Процессор P1 свободен
Очередь[]
Процессор P2 свободен

Такт 1
Задачи: Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Рендеринг кадра, tacts=4, addedIndex=4)
Task(id=Запись в лог-файл, tacts=1, addedIndex=5)
Task(id=Архивация отчета, tacts=6, addedIndex=6)
Стек[Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Инициализация процесса, tacts=3, addedIndex=1) 0/3
Очередь[]
Процессор P2 свободен

Такт 2
Задачи: Task(id=Рендеринг кадра, tacts=4, addedIndex=4)
Task(id=Запись в лог-файл, tacts=1, addedIndex=5)
Task(id=Архивация отчета, tacts=6, addedIndex=6)
Стек[Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Инициализация процесса, tacts=3, addedIndex=1) 1/3
Очередь[]
Процессор P2 свободен

Такт 3
Задачи: Task(id=Запись в лог-файл, tacts=1, addedIndex=5)
Task(id=Архивация отчета, tacts=6, addedIndex=6)
Стек[Task(id=Рендеринг кадра, tacts=4, addedIndex=4)
Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Инициализация процесса, tacts=3, addedIndex=1) 2/3
Очередь[]
Процессор P2 свободен

Такт 4
Ошибка при добавлении в стек: Стек заполнен
Задачи: Task(id=Запись в лог-файл, tacts=1, addedIndex=5)
Task(id=Архивация отчета, tacts=6, addedIndex=6)
Стек[Task(id=Рендеринг кадра, tacts=4, addedIndex=4)
Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 свободен
Очередь[Task(id=Инициализация процесса, tacts=3, addedIndex=1)]
Процессор P2 свободен

Такт 5
Задачи: Task(id=Архивация отчета, tacts=6, addedIndex=6)
Стек[Task(id=Запись в лог-файл, tacts=1, addedIndex=5)
Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Рендеринг кадра, tacts=4, addedIndex=4) 0/4
Очередь[]
Процессор P2 выполняет Task(id=Инициализация процесса, tacts=3, addedIndex=1) 0/3

Такт 6
Ошибка при добавлении в стек: Стек заполнен
Задачи: Task(id=Архивация отчета, tacts=6, addedIndex=6)
Стек[Task(id=Запись в лог-файл, tacts=1, addedIndex=5)
Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Рендеринг кадра, tacts=4, addedIndex=4) 1/4
Очередь[]
Процессор P2 выполняет Task(id=Инициализация процесса, tacts=3, addedIndex=1) 1/3

Такт 7
Ошибка при добавлении в стек: Стек заполнен
Задачи: Task(id=Архивация отчета, tacts=6, addedIndex=6)
Стек[Task(id=Запись в лог-файл, tacts=1, addedIndex=5)
Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Рендеринг кадра, tacts=4, addedIndex=4) 2/4
Очередь[]
Процессор P2 выполняет Task(id=Инициализация процесса, tacts=3, addedIndex=1) 2/3

Такт 8
Задача выполнена: Task(id=Инициализация процесса, tacts=3, addedIndex=1)
Ошибка при добавлении в стек: Стек заполнен
Задачи: Task(id=Архивация отчета, tacts=6, addedIndex=6)
Стек[Task(id=Запись в лог-файл, tacts=1, addedIndex=5)
Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Рендеринг кадра, tacts=4, addedIndex=4) 3/4
Очередь[]
Процессор P2 свободен

Такт 9
Ошибка при добавлении в стек: Стек заполнен
Задачи: Task(id=Архивация отчета, tacts=6, addedIndex=6)
Стек[Task(id=Запись в лог-файл, tacts=1, addedIndex=5)
Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 свободен
Очередь[Task(id=Рендеринг кадра, tacts=4, addedIndex=4)]
Процессор P2 свободен

Такт 10
Задачи: 
Стек[Task(id=Архивация отчета, tacts=6, addedIndex=6)
Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Запись в лог-файл, tacts=1, addedIndex=5) 0/1
Очередь[]
Процессор P2 выполняет Task(id=Рендеринг кадра, tacts=4, addedIndex=4) 0/4

Такт 11
Задачи: 
Стек[Task(id=Архивация отчета, tacts=6, addedIndex=6)
Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 свободен
Очередь[Task(id=Запись в лог-файл, tacts=1, addedIndex=5)]
Процессор P2 выполняет Task(id=Рендеринг кадра, tacts=4, addedIndex=4) 1/4

Такт 12
Задачи: 
Стек[Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Архивация отчета, tacts=6, addedIndex=6) 0/6
Очередь[Task(id=Запись в лог-файл, tacts=1, addedIndex=5)]
Процессор P2 выполняет Task(id=Рендеринг кадра, tacts=4, addedIndex=4) 2/4

Такт 13
Задачи: 
Стек[Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Архивация отчета, tacts=6, addedIndex=6) 1/6
Очередь[Task(id=Запись в лог-файл, tacts=1, addedIndex=5)]
Процессор P2 выполняет Task(id=Рендеринг кадра, tacts=4, addedIndex=4) 3/4

Такт 14
Задача выполнена: Task(id=Рендеринг кадра, tacts=4, addedIndex=4)
Задачи: 
Стек[Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Архивация отчета, tacts=6, addedIndex=6) 2/6
Очередь[Task(id=Запись в лог-файл, tacts=1, addedIndex=5)]
Процессор P2 свободен

Такт 15
Задачи: 
Стек[Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Архивация отчета, tacts=6, addedIndex=6) 3/6
Очередь[]
Процессор P2 выполняет Task(id=Запись в лог-файл, tacts=1, addedIndex=5) 0/1

Такт 16
Задача выполнена: Task(id=Запись в лог-файл, tacts=1, addedIndex=5)
Задачи: 
Стек[Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Архивация отчета, tacts=6, addedIndex=6) 4/6
Очередь[]
Процессор P2 свободен

Такт 17
Задачи: 
Стек[Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Архивация отчета, tacts=6, addedIndex=6) 5/6
Очередь[]
Процессор P2 свободен

Такт 18
Задачи: 
Стек[Task(id=Обработка ввода, tacts=2, addedIndex=3)
Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 свободен
Очередь[Task(id=Архивация отчета, tacts=6, addedIndex=6)]
Процессор P2 свободен

Такт 19
Задачи: 
Стек[Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Обработка ввода, tacts=2, addedIndex=3) 0/2
Очередь[]
Процессор P2 выполняет Task(id=Архивация отчета, tacts=6, addedIndex=6) 0/6

Такт 20
Задачи: 
Стек[Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 выполняет Task(id=Обработка ввода, tacts=2, addedIndex=3) 1/2
Очередь[]
Процессор P2 выполняет Task(id=Архивация отчета, tacts=6, addedIndex=6) 1/6

Такт 21
Задачи: 
Стек[Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
]
Процессор P1 свободен
Очередь[Task(id=Обработка ввода, tacts=2, addedIndex=3)]
Процессор P2 выполняет Task(id=Архивация отчета, tacts=6, addedIndex=6) 2/6

Такт 22
Задачи: 
Стек[]
Процессор P1 выполняет Task(id=Запрос к базе данных, tacts=5, addedIndex=2) 0/5
Очередь[Task(id=Обработка ввода, tacts=2, addedIndex=3)]
Процессор P2 выполняет Task(id=Архивация отчета, tacts=6, addedIndex=6) 3/6

Такт 23
Задачи: 
Стек[]
Процессор P1 выполняет Task(id=Запрос к базе данных, tacts=5, addedIndex=2) 1/5
Очередь[Task(id=Обработка ввода, tacts=2, addedIndex=3)]
Процессор P2 выполняет Task(id=Архивация отчета, tacts=6, addedIndex=6) 4/6

Такт 24
Задачи: 
Стек[]
Процессор P1 выполняет Task(id=Запрос к базе данных, tacts=5, addedIndex=2) 2/5
Очередь[Task(id=Обработка ввода, tacts=2, addedIndex=3)]
Процессор P2 выполняет Task(id=Архивация отчета, tacts=6, addedIndex=6) 5/6

Такт 25
Задача выполнена: Task(id=Архивация отчета, tacts=6, addedIndex=6)
Задачи: 
Стек[]
Процессор P1 выполняет Task(id=Запрос к базе данных, tacts=5, addedIndex=2) 3/5
Очередь[Task(id=Обработка ввода, tacts=2, addedIndex=3)]
Процессор P2 свободен

Такт 26
Задачи: 
Стек[]
Процессор P1 выполняет Task(id=Запрос к базе данных, tacts=5, addedIndex=2) 4/5
Очередь[]
Процессор P2 выполняет Task(id=Обработка ввода, tacts=2, addedIndex=3) 0/2

Такт 27
Задачи: 
Стек[]
Процессор P1 свободен
Очередь[Task(id=Запрос к базе данных, tacts=5, addedIndex=2)]
Процессор P2 выполняет Task(id=Обработка ввода, tacts=2, addedIndex=3) 1/2

Такт 28
Задача выполнена: Task(id=Обработка ввода, tacts=2, addedIndex=3)
Задачи: 
Стек[]
Процессор P1 свободен
Очередь[Task(id=Запрос к базе данных, tacts=5, addedIndex=2)]
Процессор P2 свободен

Такт 29
Задачи: 
Стек[]
Процессор P1 свободен
Очередь[]
Процессор P2 выполняет Task(id=Запрос к базе данных, tacts=5, addedIndex=2) 0/5

Такт 30
Задачи: 
Стек[]
Процессор P1 свободен
Очередь[]
Процессор P2 выполняет Task(id=Запрос к базе данных, tacts=5, addedIndex=2) 1/5

Такт 31
Задачи: 
Стек[]
Процессор P1 свободен
Очередь[]
Процессор P2 выполняет Task(id=Запрос к базе данных, tacts=5, addedIndex=2) 2/5

Такт 32
Задачи: 
Стек[]
Процессор P1 свободен
Очередь[]
Процессор P2 выполняет Task(id=Запрос к базе данных, tacts=5, addedIndex=2) 3/5

Такт 33
Задачи: 
Стек[]
Процессор P1 свободен
Очередь[]
Процессор P2 выполняет Task(id=Запрос к базе данных, tacts=5, addedIndex=2) 4/5

Такт 34
Задача выполнена: Task(id=Запрос к базе данных, tacts=5, addedIndex=2)
Задачи: 
Стек[]
Процессор P1 свободен
Очередь[]
Процессор P2 свободен

Работа завершена
```

Стоит отметить, что при переполнение стека будет происходить ожидание пока стек освободится, а процессор `P2` освобождается в такт выполнения задачи и может быть заполнен в этот же такт.

= Выводы

Изучил структуры данных «стек» и «очередь». На практике освоил принципы работы со статическими структурами данных "стек" и "очередь" и их применение для решения задач моделирования систем обработки запросов


