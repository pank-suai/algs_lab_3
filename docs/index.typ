#import "lib/gost.typ": init

#show: init

= Цель работы

Изучение структур данных «стек» и «очередь»,
а также получение практических навыков их реализации.

= Выполнение индивидуального задания

Реализовать структуры данных «стек» и «очередь» в соответствии с
заданным вариантом. Дополнительно программа должна удовлетворять
следующим требованиям:
+ Вывод на экран состояния моделируемой системы на каждой
  итерации работы (содержимое стека(ов), очереди(ей),
  процессора(ов));
+ Для каждой задачи из списка входных задач должно быть
  определено время поступления;
+ Необходимо наличие, как автоматического генератора задач, так и
  возможность ручного добавления задач, с указанием их параметров
  (в зависимости от задания);
+ Необходимо обработать ситуации, при которых какая-либо
  структура данных может быть переполнена.

Вариант 25


Задача 7.
Система состоит из двух процессоров P0 и P1, стека S и очереди F. В
систему могут поступать запросы на выполнение задач, причем время
выполнения задачи каждым из процессоров, может отличаться.
Поступающие запросы попадают в стек.

#figure(image("images/000_task.png"))

Если процессор P0 свободен, то в него поступает на обработку задача
из стека. После обработки задачи процессором P0, задача помещается в
очередь. Если очередь не пуста и процессор P1 свободен, то задача
извлекается из очереди, и обрабатывается процессором.

Задачу необходимо выполнить с использованием статического стека и статической очереди.

= Код программы

#raw(read("../src/main.kt"), lang: "kt", block: true)

= Скриншоты работы программы



= Выводы

Научился реализовывать статические стеки и очереди.


